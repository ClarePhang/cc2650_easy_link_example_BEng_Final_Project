//------------------------------------------------------------------------------
// TI Confidential - NDA Restrictions
//
// Copyright (c) 2013 Texas Instruments, Inc.
//
//    This is an unpublished work created in the year stated above.
//    Texas Instruments owns all rights in and to this work and
//    intends to maintain and protect it as an unpublished copyright.
//    In the event of either inadvertent or deliberate publication,
//    the above stated date shall be treated as the year of first
//    publication. In the event of such publication, Texas Instruments
//    intends to enforce its rights in the work under the copyright
//    laws as a published work.
//
//------------------------------------------------------------------------------
///
/// \file            prop_cmd.h
/// \brief           Definitions of API for Proprietary mode commands
///
///                  This file is generated by create_command.pl
///
/// \author          Low Power RF Wireless Business Unit
///                  Helge Coward (h.coward@ti.com)
///
/// \date            Wed Jan 30 18:58:41 CET 2013
///
//------------------------------------------------------------------------------

#ifndef __PROP_CMD_H
#define __PROP_CMD_H

#include <stdint.h>
#include "mailbox.h"

#define CMD_PROP_TX                                             0x3801
typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint8_t bFsOff:1;
      uint8_t :2;
      uint8_t bUseCrc:1;
      uint8_t bVarLen:1;
   } pktConf;
   uint8_t pktLen;
   uint32_t syncWord;
   uint8_t* pPkt;
} rfc_CMD_PROP_TX_t;

#define CMD_PROP_RX                                             0x3802
typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint8_t bFsOff:1;
      uint8_t bRepeatOk:1;
      uint8_t bRepeatNok:1;
      uint8_t bUseCrc:1;
      uint8_t bVarLen:1;
      uint8_t bChkAddress:1;
      uint8_t endType:1;
      uint8_t filterOp:1;
   } pktConf;
   struct {
      uint8_t bAutoFlushIgnored:1;
      uint8_t bAutoFlushCrcErr:1;
      uint8_t :1;
      uint8_t bIncludeHdr:1;
      uint8_t bIncludeCrc:1;
      uint8_t bAppendRssi:1;
      uint8_t bAppendTimestamp:1;
      uint8_t bAppendStatus:1;
   } rxConf;
   uint32_t syncWord;
   uint8_t maxPktLen;
   uint8_t address0;
   uint8_t address1;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } endTrigger;
   ratmr_t endTime;
   dataQueue_t* pQueue;
   uint8_t* pOutput;
} rfc_CMD_PROP_RX_t;

#define CMD_PROP_TX_ADV                                         0x3803
typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint8_t bFsOff:1;
      uint8_t :2;
      uint8_t bUseCrc:1;
      uint8_t bCrcIncSw:1;
      uint8_t bCrcIncHdr:1;
   } pktConf;
   uint8_t numHdrBits;
   uint16_t pktLen;
   struct {
      uint8_t bExtTxTrig:1;
      uint8_t inputMode:2;
      uint8_t source:5;
   } startConf;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } preTrigger;
   ratmr_t preTime;
   uint32_t syncWord;
   uint8_t* pPkt;
} rfc_CMD_PROP_TX_ADV_t;

#define CMD_PROP_RX_ADV                                         0x3804
typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint8_t bFsOff:1;
      uint8_t bRepeatOk:1;
      uint8_t bRepeatNok:1;
      uint8_t bUseCrc:1;
      uint8_t bCrcIncSw:1;
      uint8_t bCrcIncHdr:1;
      uint8_t endType:1;
      uint8_t filterOp:1;
   } pktConf;
   struct {
      uint8_t bAutoFlushIgnored:1;
      uint8_t bAutoFlushCrcErr:1;
      uint8_t :1;
      uint8_t bIncludeHdr:1;
      uint8_t bIncludeCrc:1;
      uint8_t bAppendRssi:1;
      uint8_t bAppendTimestamp:1;
      uint8_t bAppendStatus:1;
   } rxConf;
   uint32_t syncWord0;
   uint32_t syncWord1;
   uint16_t maxPktLen;
   struct {
      uint16_t numHdrBits:6;
      uint16_t lenPos:5;
      uint16_t numLenBits:5;
   } hdrConf;
   struct {
      uint16_t addrType:1;
      uint16_t addrSize:5;
      uint16_t addrPos:5;
      uint16_t numAddr:5;
   } addrConf;
   int8_t lenOffset;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } endTrigger;
   ratmr_t endTime;
   uint8_t* pAddr;
   dataQueue_t* pQueue;
   uint8_t* pOutput;
} rfc_CMD_PROP_RX_ADV_t;

#define CMD_PROP_CS                                             0x3805
typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint16_t bEnaRssi:1;
      uint16_t bEnaCorr:1;
      uint16_t operation:1;
      uint16_t busyOp:2;
      uint16_t idleOp:2;
      uint16_t timeoutRes:1;
      uint16_t busyTimeoutOp:1;
      uint16_t idleTimeoutOp:1;
   } csConf;
   int8_t rssiThr;
   uint8_t numRssiIdle;
   uint8_t numRssiBusy;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } timeoutTrigger;
   ratmr_t timeoutTime;
   uint16_t corrTime;
} rfc_CMD_PROP_CS_t;

#define CMD_PROP_RADIO_SETUP                                    0x3806
typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint16_t modType:3;
      uint16_t deviation:13;
   } modulation;
   struct {
      uint32_t preScale:4;
      uint32_t :4;
      uint32_t rateWord:21;
   } symbolRate;
   uint8_t rxBw;
   struct {
      uint8_t nPreamBytes:6;
      uint8_t preamMode:2;
   } preamConf;
   struct {
      uint16_t nSwBits:6;
      uint16_t bBitReversal:1;
      uint16_t bMsbFirst:1;
      uint16_t fecMode:4;
      uint16_t bOuterCode:1;
      uint16_t whitenMode:2;
      uint16_t bAgcDisable:1;
   } formatConf;
   struct {
      uint16_t frontEndMode:3;
      uint16_t biasMode:1;
      uint16_t bNoAdi0Setup:1;
      uint16_t bNoAdi0Trim:1;
      uint16_t bNoAdi0Ovr:1;
      uint16_t bNoAdi1Setup:1;
      uint16_t bNoAdi1Trim:1;
      uint16_t bNoAdi1Ovr:1;
      uint16_t bNoFsPowerUp:1;
   } config;
   struct {
      uint16_t IB:6;
      uint16_t GC:2;
      //LH: Not sure if essential, but the bit field is set to be a part of tempCoeff
      //uint16_t boost:1;
      //NB! if the above bitfield is enabled, tempCoeff should occupy 7 bits instead of 8
      uint16_t tempCoeff:8;
   } txPower;
   uint32_t* pRegOverride;
} rfc_CMD_PROP_RADIO_SETUP_t;

#define CMD_PROP_SET_LEN                                        0x3401
typedef struct {
   uint16_t commandNo;
   uint16_t rxLen;
} rfc_CMD_PROP_SET_LEN_t;

#define CMD_PROP_RESTART_RX                                     0x3402
typedef struct {
   uint16_t commandNo;
} rfc_CMD_PROP_RESTART_RX_t;

typedef struct {
   uint16_t nRxOk;
   uint16_t nRxNok;
   uint8_t nRxIgnored;
   uint8_t nRxStopped;
   uint8_t nRxBufFull;
   int8_t lastRssi;
   ratmr_t timeStamp;
} rfc_propRxOutput_t;

typedef struct {
   struct {
      uint8_t addressInd:5;
      uint8_t syncWordId:1;
      uint8_t result:2;
   } status;
} rfc_propRxStatus_t;

#endif

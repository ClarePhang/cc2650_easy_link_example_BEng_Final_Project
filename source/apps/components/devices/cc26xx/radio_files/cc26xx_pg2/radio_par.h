//------------------------------------------------------------------------------
// TI Confidential - NDA Restrictions
//
// Copyright (c) 2011 Texas Instruments, Inc.
//
//    This is an unpublished work created in the year stated above.
//    Texas Instruments owns all rights in and to this work and
//    intends to maintain and protect it as an unpublished copyright.
//    In the event of either inadvertent or deliberate publication,
//    the above stated date shall be treated as the year of first
//    publication. In the event of such publication, Texas Instruments
//    intends to enforce its rights in the work under the copyright
//    laws as a published work.
//
//------------------------------------------------------------------------------
///
/// \file            radio_par.h
/// \brief           Definition of radio parameter override registers
///
///                  This file is generated by create_command.pl
///
/// \author          Low Power RF Wireless Business Unit
///                  Helge Coward (h.coward@ti.com)
///
/// \date            Thu Nov 17 10:26:10 CET 2011
///
//------------------------------------------------------------------------------

#ifndef __RADIO_PAR_H
#define __RADIO_PAR_H

#include <stdint.h>

/// Type for the radio configuration defined in radio_par_def.txt
//
/// When accessed, a typecast is made to the structs defined below. The definition here is uint32_t 
/// to ensure the  correct alignment. It must be checked that the array is large enough for the structs.
///
typedef uint32_t radioCfg_t[48];

extern radioCfg_t radioCfg;

typedef struct {
   uint16_t maxFutureTime;
   uint8_t numSwBits;
   uint8_t preamCtrl;
   uint16_t preamPattern;
   uint8_t bNoPtrCheck;
   int8_t rssiOverride;
   struct {
      uint32_t moduleEn:1;
      uint32_t :1;
      uint32_t intpFactor:2;
      uint32_t shapeGain:2;
      uint32_t useZU:1;
      uint32_t useShaped154:1;
      uint32_t txOff:12;
      uint32_t bDynamicTxFreq:1;
   } modIsfCfgVal;
   uint32_t const * pModIsfShape;
   struct {
      uint8_t bWhEn:1;
      uint8_t bWhBitRev:1;
      uint8_t bMsbFirst:1;
      uint8_t bNoSwPreamProg:1;
      uint8_t bSwDepPream:1;
      uint8_t bWhBeforeCrc:1;
      uint8_t dualSwConfig:2;
   } crcWhConfig;
   uint8_t numCrcBits;
   uint16_t introduceCrcErr;
   uint32_t crcInit;
   uint32_t crcXor;
   uint32_t whInit;
   uint16_t startToTxRatOffset;
   uint16_t startToRxRatOffset;
   uint16_t startToSynthRatOffset;
   uint16_t txToRxRatOffset;
   uint16_t rxToTxRatOffset;
   uint16_t syncTimeAdjust;
   uint8_t rxFifoThrSleep;
   uint8_t txFifoThrSleep;
   uint16_t ratTicksPerBit;
   struct {
      uint16_t freqWordOvr:12;
      uint16_t :2;
      uint16_t bOvrMdmRfCh:1;
      uint16_t bWrMdmRfCh:1;
   } mdmFreqWordOvr;
   int16_t mdmRxIntFreq;
   int16_t mdmTxIntFreq;
   uint8_t mdmPShift;
   uint8_t mdmQShift;
   uint16_t txFreqBase;
   int16_t freqOffset;
   struct {
      uint32_t preScale:8;
      uint32_t rateWord:21;
      uint32_t bFsAdjust:1;
      uint32_t bSymbolRateAdjust:1;
      uint32_t bRatAdjust:1;
   } bawConfig;
} rfc_radioPar_t;

typedef struct {
   uint32_t __dummy0;
   uint32_t __dummy1;
   uint32_t __dummy2;
   uint32_t __dummy3;
   uint32_t __dummy4;
   uint32_t __dummy5;
   uint32_t __dummy6;
   uint32_t __dummy7;
   uint32_t __dummy8;
   uint32_t __dummy9;
   uint32_t __dummy10;
   uint32_t __dummy11;
   uint32_t __dummy12;
   uint32_t __dummy13;
   uint32_t __dummy14;
   uint32_t __dummy15;
   struct {
      uint16_t b24MHzXtal:1;
      uint16_t bSkipTdcCalib:1;
      uint16_t bSkipCoarseCalib:1;
      uint16_t bSkipMidCalib:1;
      uint16_t bForceTxMode:1;
      uint16_t bOpenLoop1Pt:1;
      uint16_t :1;
      uint16_t bDisableSynthProg:1;
      uint16_t bDisableSynthEnaPoll:1;
      uint16_t bPhaseErrorDiscard:1;
   } config;
   int8_t ktAvgOffset;
   uint8_t tdcFactor;
   int8_t tdcOffset1;
   int8_t tdcOffset2;
   uint8_t peThreshFactor;
   int8_t peThreshOffset;
   uint8_t tdcSubtractFactor;
   int8_t tdcSubtractOffset;
   uint8_t defaultPreDivRatio24;
   uint8_t __dummy16;
   uint32_t fXtalInv;
   uint32_t K1;
   uint32_t K2BL16;
   uint32_t K2AL16;
   uint32_t K3BL;
   uint32_t K3AL;
   uint32_t K5;
   uint8_t M2K;
   uint8_t M3K;
   uint8_t M4K;
   uint8_t synthRegAnaDivLsbFsOnly;
   uint8_t synthRegAnaDivLsbRx;
   uint8_t synthRegAnaDivLsbTx;
   uint8_t ktPrecal;
   uint8_t ktPrecal1;
   uint16_t tdcPrecal;
   uint16_t tdcPrecal1;
   uint8_t coarsePrecal;
   uint8_t coarsePrecal1;
   uint8_t coarsePrecal2;
   uint8_t coarsePrecal3;
   uint8_t midPrecal;
   uint8_t midPrecal01;
   uint8_t midPrecal02;
   uint8_t midPrecal03;
   uint8_t midPrecal04;
   uint8_t midPrecal05;
   uint8_t midPrecal06;
   uint8_t midPrecal07;
   uint8_t midPrecal08;
   uint8_t midPrecal09;
   uint8_t midPrecal10;
   uint8_t midPrecal11;
   uint8_t midPrecal12;
   uint8_t midPrecal13;
   uint8_t midPrecal14;
   uint8_t midPrecal15;
} rfc_synthPar_t;

typedef struct {
   uint32_t __dummy0;
   uint32_t __dummy1;
   uint32_t __dummy2;
   uint32_t __dummy3;
   uint32_t __dummy4;
   uint32_t __dummy5;
   uint32_t __dummy6;
   uint32_t __dummy7;
   uint32_t __dummy8;
   uint32_t __dummy9;
   uint32_t __dummy10;
   uint32_t __dummy11;
   uint32_t __dummy12;
   uint32_t __dummy13;
   uint32_t __dummy14;
   uint32_t __dummy15;
   uint32_t __dummy16;
   uint32_t __dummy17;
   uint32_t __dummy18;
   uint32_t __dummy19;
   uint32_t __dummy20;
   uint32_t __dummy21;
   uint32_t __dummy22;
   uint32_t __dummy23;
   uint32_t __dummy24;
   uint32_t __dummy25;
   uint32_t __dummy26;
   uint32_t __dummy27;
   uint32_t __dummy28;
   uint32_t __dummy29;
   uint32_t __dummy30;
   uint32_t __dummy31;
   uint32_t __dummy32;
   uint32_t __dummy33;
   int8_t lnaIbOffset;
   int8_t ifAmpTrimOffset;
   int8_t rssiOffset;
   struct {
      uint8_t bOutputLnaEn:1;
      uint8_t bOutputPaEn:1;
   } gpoContol;
} rfc_frontEndPar_t;

typedef struct {
   uint32_t __dummy0;
   uint32_t __dummy1;
   uint32_t __dummy2;
   uint32_t __dummy3;
   uint32_t __dummy4;
   uint32_t __dummy5;
   uint32_t __dummy6;
   uint32_t __dummy7;
   uint32_t __dummy8;
   uint32_t __dummy9;
   uint32_t __dummy10;
   uint32_t __dummy11;
   uint32_t __dummy12;
   uint32_t __dummy13;
   uint32_t __dummy14;
   uint32_t __dummy15;
   uint32_t __dummy16;
   uint32_t __dummy17;
   uint32_t __dummy18;
   uint32_t __dummy19;
   uint32_t __dummy20;
   uint32_t __dummy21;
   uint32_t __dummy22;
   uint32_t __dummy23;
   uint32_t __dummy24;
   uint32_t __dummy25;
   uint32_t __dummy26;
   uint32_t __dummy27;
   uint32_t __dummy28;
   uint32_t __dummy29;
   uint32_t __dummy30;
   uint32_t __dummy31;
   uint32_t __dummy32;
   uint32_t __dummy33;
   uint32_t __dummy34;
   uint32_t __dummy35;
   uint32_t advSyncWord;
   uint8_t maxCrcErr;
   uint8_t numDfBytes;
   uint8_t dataHeaderAnd;
   uint8_t dataAutoEmptyHdr;
   uint8_t advIndHdr;
   uint8_t advDirIndHdr;
   uint8_t advNcIndHdr;
   uint8_t advScanIndHdr;
   uint8_t scanReqHdr;
   uint8_t connectReqHdr;
   uint8_t scanRspHdr;
   uint8_t __dummy36;
   uint8_t dataLengthOr;
   uint8_t advLengthOr;
   uint8_t dataLenMask;
   uint8_t maxDataLen;
   uint8_t advLenMask;
   uint8_t maxAdvLen;
   uint16_t rxIfsTimeout;
   uint8_t minLogUpperLimit;
   uint8_t maxLogUpperLimit;
   uint16_t winOffsetMargin;
   uint16_t extraWinSzLimit;
   uint8_t minWinSz;
   uint8_t bWinOffsetNotZero;
   uint16_t ticksPerConnIntStep;
} rfc_bleRadioPar_t;

typedef struct {
   uint32_t __dummy0;
   uint32_t __dummy1;
   uint32_t __dummy2;
   uint32_t __dummy3;
   uint32_t __dummy4;
   uint32_t __dummy5;
   uint32_t __dummy6;
   uint32_t __dummy7;
   uint32_t __dummy8;
   uint32_t __dummy9;
   uint32_t __dummy10;
   uint32_t __dummy11;
   uint32_t __dummy12;
   uint32_t __dummy13;
   uint32_t __dummy14;
   uint32_t __dummy15;
   uint32_t __dummy16;
   uint32_t __dummy17;
   uint32_t __dummy18;
   uint32_t __dummy19;
   uint32_t __dummy20;
   uint32_t __dummy21;
   uint32_t __dummy22;
   uint32_t __dummy23;
   uint32_t __dummy24;
   uint32_t __dummy25;
   uint32_t __dummy26;
   uint32_t __dummy27;
   uint32_t __dummy28;
   uint32_t __dummy29;
   uint32_t __dummy30;
   uint32_t __dummy31;
   uint32_t __dummy32;
   uint32_t __dummy33;
   uint32_t __dummy34;
   uint32_t __dummy35;
   uint8_t numPreambleNibbles;
   uint8_t phyLenMask;
   uint16_t preambleWord;
   uint16_t ackMacHdr;
   uint16_t frameCtrlAnd;
   uint16_t frameCtrlAndData;
   uint16_t frameCtrlAndAck;
   uint16_t frameCtrlAndMacCmd;
   uint16_t frameCtrlAndFt4;
   uint16_t frameCtrlAndFt5;
   uint16_t frameCtrlAndFt6;
   uint16_t frameCtrlAndFt7;
   int16_t rxFrameEndOffset;
   int16_t txFrameEndOffset;
   uint16_t backoffPeriod;
   uint16_t csmaSlottedWaitBeforeCca;
   uint16_t csmaUnslottedWaitBeforeCca;
   uint16_t csmaUnslottedWaitAfterCca;
   uint16_t csmaUnslottedWait0Cca;
   uint16_t csmaRxWakeupTime;
   uint16_t csmaRxWakeupMargin;
   uint16_t ccaCorrWindow;
   uint16_t rxCcaCorrValidTime;
} rfc_ieeeRadioPar_t;

typedef struct {
   uint32_t __dummy0;
   uint32_t __dummy1;
   uint32_t __dummy2;
   uint32_t __dummy3;
   uint32_t __dummy4;
   uint32_t __dummy5;
   uint32_t __dummy6;
   uint32_t __dummy7;
   uint32_t __dummy8;
   uint32_t __dummy9;
   uint32_t __dummy10;
   uint32_t __dummy11;
   uint32_t __dummy12;
   uint32_t __dummy13;
   uint32_t __dummy14;
   uint32_t __dummy15;
   uint32_t __dummy16;
   uint32_t __dummy17;
   uint32_t __dummy18;
   uint32_t __dummy19;
   uint32_t __dummy20;
   uint32_t __dummy21;
   uint32_t __dummy22;
   uint32_t __dummy23;
   uint32_t __dummy24;
   uint32_t __dummy25;
   uint32_t __dummy26;
   uint32_t __dummy27;
   uint32_t __dummy28;
   uint32_t __dummy29;
   uint32_t __dummy30;
   uint32_t __dummy31;
   uint32_t __dummy32;
   uint32_t __dummy33;
   uint32_t __dummy34;
   uint32_t __dummy35;
   uint32_t syncWord;
} rfc_hsRadioPar_t;

#endif

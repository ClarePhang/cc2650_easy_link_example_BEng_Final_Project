/******************************************************************************
*  Filename:       adi.h
*  Revised:        $Date: 2014-03-13 14:29:16 +0100 (to, 13 mar 2014) $
*  Revision:       $Revision: 40389 $
*
*  Description:    Defines and prototypes for the ADI master interface.
*
*  Copyright (C) 2014 Texas Instruments Incorporated - http://www.ti.com/
*
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*    Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
*    Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
*    Neither the name of Texas Instruments Incorporated nor the names of
*    its contributors may be used to endorse or promote products derived
*    from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
*  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
******************************************************************************/

//*****************************************************************************
//
//! \addtogroup adi_api
//! @{
//
//*****************************************************************************

#ifndef __ADI_H__
#define __ADI_H__

//*****************************************************************************
//
// If building with a C++ compiler, make all of the definitions in this header
// have a C binding.
//
//*****************************************************************************
#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stdint.h>
#include "hw_types.h"
#include "hw_uart.h"
#include "hw_memmap.h"
#include "hw_ints.h"
#include "hw_adi.h"
#include "debug.h"

//*****************************************************************************
//
// Number of registers in the ADI slave
//
//*****************************************************************************
#define ADI_SLAVE_REGS      16

//*****************************************************************************
//
// Defines that can be passed to the ADIConfigSet()
//
//*****************************************************************************
#define ADI_NO_WAIT         0x00000000
#define ADI_WAIT_FOR_ACK    0x00000004
#define ADI_SPEED_2         0x00000000
#define ADI_SPEED_4         0x00000001
#define ADI_SPEED_8         0x00000002
#define ADI_SPEED_16        0x00000003
#define ADI_CONFIG_MASK     0x00000007

//*****************************************************************************
//
// Defines that is used to control the ADI slave and master
//
//*****************************************************************************
#define ADI_PROTECT         0x00000080
#define ADI_ACK             0x00000001
#define ADI_SYNC            0x00000000

//*****************************************************************************
//
// API Overview
//
//*****************************************************************************
// uint32_t ADIStatusGet(uint32_t ui32Base);
// void ADIConfigSet(uint32_t ui32Base, uint32_t ui32Config, 
//                   bool bProtect);
// void ADISync(uint32_t ui32Base);
// void ADIProtect(uint32_t ui32Base);
// void ADI8RegWrite(uint32_t ui32Base, uint32_t ui32Reg,
//                   uint8_t ui8Val);
// void ADI16RegWrite(uint32_t ui32Base, uint32_t ui32Reg,
//                    uint16_t ui16Val);
// void ADI32RegWrite(uint32_t ui32Base, uint32_t ui32Reg,
//                    uint32_t ui32Val);
// uint32_t ADI8RegRead(uint32_t ui32Base, uint32_t ui32Reg);
// uint32_t ADI16RegRead(uint32_t ui32Base, 
//                       uint32_t ui32Reg);
// uint32_t ADI32RegRead(uint32_t ui32Base, uint32_t ui32Reg);
// void ADI8BitsSet(uint32_t ui32Base, uint32_t ui32Reg, 
//                  uint8_t ui8Val);
// void ADI16BitsSet(uint32_t ui32Base, uint32_t ui32Reg, 
//                   uint16_t ui16Val);
// void ADI32BitsSet(uint32_t ui32Base, uint32_t ui32Reg, 
//                   uint32_t ui32Val);
// void ADI8BitsClear(uint32_t ui32Base, uint32_t ui32Reg, 
//                    uint8_t ui8Val);
// void ADI16BitsClear(uint32_t ui32Base, uint32_t ui32Reg, 
//                     uint16_t ui16Val);
// void ADI32BitsClear(uint32_t ui32Base, uint32_t ui32Reg, 
//                     uint32_t ui32Val);
// void ADI4SetValBit(uint32_t ui32Base, uint32_t ui32Reg, 
//                    bool bWriteHigh, uint8_t ui8Mask,
//                    uint8_t ui8Val);
// void ADI8SetValBit(uint32_t ui32Base, uint32_t ui32Reg,
//                    uint16_t ui16Mask, uint16_t ui16Val);
// void ADI16SetValBit(uint32_t ui32Base, uint32_t ui32Reg,
//                     uint32_t ui32Mask, uint32_t ui32Val)

//*****************************************************************************
//
// API Functions and prototypes
//
//*****************************************************************************

//*****************************************************************************
//
//! \internal
//! Checks an ADI base address
//!
//! \param ui32Base is the base address of the ADI port.
//!
//! This function determines if a ADI port base address is valid.
//!
//! \return Returns \b true if the base address is valid and \b false
//! otherwise
//
//*****************************************************************************
#ifdef DEBUG
static bool
ADIBaseValid(uint32_t ui32Base)
{
    return(ui32Base == ADI2_BASE || ui32Base == ADI3_BASE ||
           ui32Base == AUX_ADI_BASE);
}
#endif

//*****************************************************************************
//
//! Get the status of the ADI
//!
//! \param ui32Base is ADI base address.
//!
//! This function will get the value of the status register. Value that can
//! be passed to this function are ADI2 and ADI3.
//!
//! \return Returns the current value of the status register
//
//*****************************************************************************
__STATIC_INLINE uint32_t
ADIStatusGet(uint32_t ui32Base)
{
    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));

    //
    // Return the status value for the correct ADI Slave.
    //
    return(HWREG(ui32Base + ADI_O_SLAVESTAT));
}

//*****************************************************************************
//
//! Configure the ADI Slave
//!
//! \param ui32Base is ADI base address.
//! \param ui32Config is the configuration of the ADI slave.
//! \param bProtect determines if the register access should be protected.
//!
//! Use this function to configure the interface between the ADI master and the
//! ADI slave. The configuration values for the ADI slave is used to set the
//! speed of the ADI interface and define if the master should wait for
//! acknowledge from the slave. The speed is set using \b ADI_SPEED_2,
//! \b ADI_SPEED_4, \b ADI_SPEED_8 or ADI_SPEED_16. The acknowledge is set
//! using \b ADI_NO_WAIT or \b ADI_WAIT_FOR_ACK. The configuration value must
//! be a bitwised OR'ed combination of these two features.
//!
//! If the \b bProtect parameter is set, the register in the ADI slave are
//! locked for write.
//!
//! \note Once the PROTECT bit has been set, it is no longer possible to access
//! the configuration registers.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADIConfigSet(uint32_t ui32Base, uint32_t ui32Config, bool bProtect)
{
    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(((ui32Config & 0x4) == ADI_NO_WAIT) ||
           ((ui32Config & 0x4) == ADI_WAIT_FOR_ACK));
    ASSERT(((ui32Config & 0x3) == ADI_SPEED_2) ||
           ((ui32Config & 0x3) == ADI_SPEED_4) ||
           ((ui32Config & 0x3) == ADI_SPEED_8) ||
           ((ui32Config & 0x3) == ADI_SPEED_16));

    //
    // Configure the ADI slave.
    //
    HWREG(ui32Base + ADI_O_SLAVECONF) = (ui32Config & 0x7) |
                                        (bProtect ? ADI_PROTECT : 0);
}

//*****************************************************************************
//
//! Synchronize the ADI slave
//!
//! \param ui32Base is ADI base address.
//!
//! This function will perform a sync on the ADI slave by issuing a NOOP
//! ADI command to the master with REQ=0. In other words, the master
//! performs a dummy write request to ensure the master and slave are
//! synchronized.
//!
//! \note It is recommended to sync with all the ADI slave before a power down
//! of the ADI master.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADISync(uint32_t ui32Base)
{
    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));

    //
    // Synchronize the ADI slave to guarantee future write operations.
    //
    HWREGB(ui32Base + ADI_O_SLAVESTAT) = ADI_SYNC;
}

//*****************************************************************************
//
//! Protect an ADI slave by locking the register access
//!
//! \param ui32Base is ADI base address.
//!
//! This function will lock the register interface to the ADI.
//! \note Once locked it is no longer possible to change the register in the
//! ADI slave.
//!
//! \note This function uses read-modify-write to guarantee the integrity of
//! the configuration. This might take exceedingly long time, so if the
//! configuration is known, it is advised to use the ADIConfig() for
//! protecting the ADI slave configuration
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADIProtect(uint32_t ui32Base)
{
    uint32_t ui32Val;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));

    //
    // Lock the register interface on the ADI slave.
    //
    ui32Val = HWREG(ui32Base + ADI_O_SLAVECONF);
    ui32Val |= ADI_PROTECT;
    HWREG(ui32Base + ADI_O_SLAVECONF) = ui32Val;
}

//*****************************************************************************
//
//! Write an 8 bit value to a register in an ADI slave
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the register to write.
//! \param ui8Val is the 8 bit value to write to the register.
//!
//! This function will write a value to a single register in the analog domain.
//! The access to the registers in the analog domain is either 8, 16, or 32 bit
//! aligned. You can only do 16 bit access on registers 0-1 / 2-3, etc. Similar
//! 32 bit accesses are always performed on register 0-3 / 4-7, etc. Addresses
//! for the registers and values being written to the registers will be
//! truncated according to this access sceme.
//!
//! \note This operation is write only for the specified register. No
//! conservation of the previous value of the register will be kept (ie. this
//! is NOT read-modify-write on the register).
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI8RegWrite(uint32_t ui32Base, uint32_t ui32Reg, uint8_t ui8Val)
{
    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Write the value to the register.
    //
    HWREGB(ui32Base + ui32Reg) = ui8Val;
}

//*****************************************************************************
//
//! Write a 16 bit value to 2 registers in the ADI slave
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the register to write.
//! \param ui16Val is the 16 bit value to write to the register.
//!
//! This function will write a value to 2 consecutive registers in the analog
//! domain. The access to the registers in the analog domain is either 8, 16
//! or 32 bit aligned. You can only do 16 bit access on registers 0-1 / 2-3,
//! etc. Similar 32 bit accesses are always performed on register 0-3 / 4-7,
//! etc. Addresses for the registers and values being written
//! to the registers will be truncated according to this access sceme.
//!
//! \note This operation is write only for the specified register. No
//! conservation of the previous value of the register will be kept (ie. this
//! is NOT read-modify-write on the register).
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI16RegWrite(uint32_t ui32Base, uint32_t ui32Reg,
              uint16_t ui16Val)
{
    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Write the value to the register.
    //
    HWREGH(ui32Base + (ui32Reg & 0xFE)) = ui16Val;
}

//*****************************************************************************
//
//! Write a 32 bit value to 4 registers in the ADI slave
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the register to write.
//! \param ui32Val is the 32 bit value to write to the register.
//!
//! This function will write a value to 4 consecutive registers in the analog
//! domain. The access to the registers in the analog domain is either 8, 16
//! or 32 bit aligned. You can only do 16 bit access on registers 0-1 / 2-3,
//! etc. Similar 32 bit accesses are always performed on register 0-3 / 4-7,
//! etc. Addresses for the registers and values being written
//! to the registers will be truncated according to this access sceme.
//!
//! \note This operation is write only for the specified register. No
//! conservation of the previous value of the register will be kept (ie. this
//! is NOT read-modify-write on the register).
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI32RegWrite(uint32_t ui32Base, uint32_t ui32Reg, uint32_t ui32Val)
{
    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Write the value to the register.
    //
    HWREG(ui32Base + (ui32Reg & 0xFC)) = ui32Val;
}

//*****************************************************************************
//
//! Read the value of an 8 bit register in the ADI slave
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the 8 bit register to read.
//!
//! This function will read an 8 bit register in the analog domain and return
//! the value as the lower 8 bits of an uint32_t. The access to the
//! registers in the analog domain is either 8, 16 or 32 bit aligned. You can
//! only do 16 bit access on registers 0-1 / 2-3, etc. Similar 32 bit accesses
//! are always performed on register 0-3 / 4-7, etc. Addresses for the
//! registers and values being written to the registers will be truncated
//! according to this access sceme.
//!
//! \return Returns the 8 bit value of the analog register in the least
//! significant byte of the uint32_t.
//
//*****************************************************************************
__STATIC_INLINE uint32_t
ADI8RegRead(uint32_t ui32Base, uint32_t ui32Reg)
{
    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Read the register and return the value.
    //
    return(HWREGB(ui32Base + ui32Reg));
}

//*****************************************************************************
//
//! Read the value in a 16 bit register
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the 16 bit register to read.
//!
//! This function will read 2 x 8 bit registers in the analog domain and return
//! the value as the lower 16 bits of an uint32_t. The access to the
//! registers in the analog domain is either 8, 16 or 32 bit aligned. You can
//! only do 16 bit access on registers 0-1 / 2-3, etc. Similar 32 bit accesses
//! are always performed on register 0-3 / 4-7, etc. Addresses for the
//! registers and values being written to the registers will be truncated
//! according to this access sceme.
//!
//! \note The byte addressing bit will be ignored, to ensure 16 bit access
//! to the ADI slave.
//!
//! \return Returns the 16 bit value of the 2 analog register in the 2 least
//! significant bytes of the uint32_t.
//
//*****************************************************************************
__STATIC_INLINE uint32_t
ADI16RegRead(uint32_t ui32Base, uint32_t ui32Reg)
{
    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Read the registers and return the value.
    //
    return(HWREGH(ui32Base + (ui32Reg & 0xFE)));
}

//*****************************************************************************
//
//! Read the value in a 32 bit register
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the 32 bit register to read.
//!
//! This function will read 4 x 8 bit registers in the analog domain and return
//! the value as an uint32_t. The access to the registers in the analog
//! domain is either 8, 16 or 32 bit aligned. You can only do 16 bit access on
//! registers 0-1 / 2-3, etc. Similar 32 bit accesses are always performed on
//! register 0-3 / 4-7, etc. Addresses for the registers and values being
//! written to the registers will be truncated according to this access sceme.
//!
//! \note The byte and half word addressing bits will be ignored, to ensure
//! 32 bit access to the ADI slave.
//!
//! \return Returns the 32 bit value of the 4 analog registers.
//
//*****************************************************************************
__STATIC_INLINE uint32_t
ADI32RegRead(uint32_t ui32Base, uint32_t ui32Reg)
{
    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Read the registers and return the value.
    //
    return(HWREG(ui32Base + (ui32Reg & 0xFC)));
}

//*****************************************************************************
//
//! Set specific bits in a single 8 bit ADI register
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the base register to assert the bits in.
//! \param ui8Val is the 8 bit one-hot encoded value specifying which
//! bits to set in the register(s).
//!
//! This function will set bits in a  single register in the analog domain.
//! The access to the registers in the analog domain is either 8, 16 or 32 bit
//! aligned, but arranged in chunck of 32 bits. You can only do 16 bit access
//! on registers 0-1 / 2-3, etc. Similar 32 bit accesses are always
//! performed on register 0-3 / 4-7 etc. Addresses for the registers and values
//! being written to the registers will be truncated according to this access
//! sceme.
//!
//! \note This operation is write only for the specified register.
//! This function is used to set bits in a specific 8 bit register in the
//! ADI slave. Only bits in the selected register(s) is affected by the
//! operation.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI8BitsSet(uint32_t ui32Base, uint32_t ui32Reg, uint8_t ui8Val)
{
    uint32_t ui32RegOffset;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Get the correct address of the first register used for setting bits
    // in the ADI slave.
    //
    ui32RegOffset = ADI_O_SET;

    //
    // Set the selected bits.
    //
    HWREGB(ui32Base + ui32RegOffset + ui32Reg) = ui8Val;
}

//*****************************************************************************
//
//! Set specific bits in 2 x 8 bit ADI slave registers
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the base register to assert the bits in.
//! \param ui16Val is the 16 bit one-hot encoded value specifying which
//! bits to set in the register(s).
//!
//! This function will set bits in a 2 registers in the analog domain.
//! The access to the registers in the analog domain is either 8, 16 or 32 bit
//! aligned, but arranged in chunck of 32 bits. You can only do 16 bit access
//! on registers 0-1 / 2-3, etc. Similar 32 bit accesses are always
//! performed on register 0-3 / 4-7 etc. Addresses for the registers and values
//! being written to the registers will be truncated according to this access
//! sceme.
//!
//! \note This operation is write only for the specified register.
//! This function is used to set bits in 2 consecutive 8 bit registers in the
//! ADI slave. Only bits in the selected registers is affected by the
//! operation.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI16BitsSet(uint32_t ui32Base, uint32_t ui32Reg, uint16_t ui16Val)
{
    uint32_t ui32RegOffset;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Get the correct address of the first register used for setting bits
    // in the ADI slave.
    //
    ui32RegOffset = ADI_O_SET;

    //
    // Set the selected bits.
    //
    HWREGH(ui32Base + ui32RegOffset + (ui32Reg & 0xFE)) = ui16Val;
}

//*****************************************************************************
//
//! Set specific bits in 4 8 bit ADI slave registers
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the base register to assert the bits in.
//! \param ui32Val is the 32 bit one-hot encoded value specifying which
//! bits to set in the register(s).
//!
//! This function will set bits in a 4 registers in the analog domain.
//! The access to the registers in the analog domain is either 8, 16 or 32 bit
//! aligned, but arranged in chunck of 32 bits. You can only do 16 bit access
//! on registers 0-1 / 2-3, etc. Similar 32 bit accesses are always
//! performed on register 0-3 / 4-7 etc. Addresses for the registers and values
//! being written to the registers will be truncated according to this access
//! sceme.
//!
//! \note This operation is write only for the specified register.
//! This function is used to set bits in 4 consecutive 8 bit registers in the
//! ADI slave. Only bits in the selected registers is affected by the
//! operation.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI32BitsSet(uint32_t ui32Base, uint32_t ui32Reg, uint32_t ui32Val)
{
    uint32_t ui32RegOffset;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Get the correct address of the first register used for setting bits
    // in the ADI slave.
    //
    ui32RegOffset = ADI_O_SET;

    //
    // Set the selected bits.
    //
    HWREG(ui32Base + ui32RegOffset + (ui32Reg & 0xFC)) = ui32Val;
}

//*****************************************************************************
//
//! Clear specific bits in an 8 bit ADI register
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the base registers to clear the bits in.
//! \param ui8Val is the 8 bit one-hot encoded value specifying which
//! which bits to clear in the register(s).
//!
//! This function will clear bits in a register in the analog domain.
//! The access to the registers in the analog domain is either 8, 16 or 32 bit
//! aligned, but arranged in chunck of 32 bits. You can only do 16 bit access
//! on registers 0-1 / 2-3, etc. Similar 32 bit accesses are always
//! performed on register 0-3 / 4-7 etc. Addresses for the registers and values
//! being written to the registers will be truncated according to this access
//! sceme.
//!
//! \note This operation is write only for the specified register.
//! This function is used to clear bits in a specific 8 bit register in
//! the ADI slave. Only bits in the selected register is affected by the
//! operation.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI8BitsClear(uint32_t ui32Base, uint32_t ui32Reg, uint8_t ui8Val)
{
    uint32_t ui32RegOffset;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Get the correct address of the first register used for setting bits
    // in the ADI slave.
    //
    ui32RegOffset = ADI_O_CLR;

    //
    // Set the selected bits.
    //
    HWREGB(ui32Base + ui32RegOffset + ui32Reg) = ui8Val;
}

//*****************************************************************************
//
//! Clear specific bits in 2 8 bit ADI register
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the base registers to clear the bits in.
//! \param ui16Val is the 16 bit one-hot encoded value specifying which
//! which bits to clear in the register(s).
//!
//! This function will clear bits in 2 registers in the analog domain.
//! The access to the registers in the analog domain is either 8, 16 or 32 bit
//! aligned, but arranged in chunck of 32 bits. You can only do 16 bit access
//! on registers 0-1 / 2-3, etc. Similar 32 bit accesses are always
//! performed on register 0-3 / 4-7 etc. Addresses for the registers and values
//! being written to the registers will be truncated according to this access
//! sceme.
//!
//! \note This operation is write only for the specified register.
//! This function is used to clear bits in 2 consecutive 8 bit registers in
//! the ADI slave. Only bits in the selected registers is affected by the
//! operation.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI16BitsClear(uint32_t ui32Base, uint32_t ui32Reg, uint16_t ui16Val)
{
    uint32_t ui32RegOffset;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Get the correct address of the first register used for setting bits
    // in the ADI slave.
    //
    ui32RegOffset = ADI_O_CLR;

    //
    // Set the selected bits.
    //
    HWREGH(ui32Base + ui32RegOffset + (ui32Reg & 0xFE)) = ui16Val;
}

//*****************************************************************************
//
//! Clear specific bits in 4 8 bit ADI register
//!
//! \param ui32Base is ADI base address.
//! \param ui32Reg is the base registers to clear the bits in.
//! \param ui32Val is the 32 bit one-hot encoded value specifying which
//! which bits to clear in the register(s).
//!
//! This function will clear bits in 4 registers in the analog domain.
//! The access to the registers in the analog domain is either 8, 16 or 32 bit
//! aligned, but arranged in chunck of 32 bits. You can only do 16 bit access
//! on registers 0-1 / 2-3, etc. Similar 32 bit accesses are always
//! performed on register 0-3 / 4-7 etc. Addresses for the registers and values
//! being written to the registers will be truncated according to this access
//! sceme.
//!
//! \note This operation is write only for the specified register.
//! This function is used to clear bits in 4 consecutive 8 bit registers in
//! the ADI slave. Only bits in the selected registers is affected by the
//! operation.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI32BitsClear(uint32_t ui32Base, uint32_t ui32Reg, uint32_t ui32Val)
{
    uint32_t ui32RegOffset;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);

    //
    // Get the correct address of the first register used for setting bits
    // in the ADI slave.
    //
    ui32RegOffset = ADI_O_CLR;

    //
    // Set the selected bits.
    //
    HWREG(ui32Base + ui32RegOffset + (ui32Reg & 0xFC)) = ui32Val;
}

//*****************************************************************************
//
//! Set a value on any 4 bits inside an 8 bit register in the ADI slave
//!
//! \param ui32Base is the base address of the ADI port.
//! \param ui32Reg is the Least Significant Register in the ADI slave that
//! will be affected by the write operation.
//! \param bWriteHigh defines which part of the register to write in.
//! \param ui8Mask is the mask defining which of the 4 bit that should be
//! overwritten. The mask must be defined in the lower half of the 8 bits.
//! \param ui8Val is the value to write. The value must be defined in the lower
//! half of the 8 bits.
//!
//! This function allows halfbyte (4 bit access) to the ADI slave registers.
//! The parameter \e bWriteHigh determines whether to write to the lower
//! or higher part of the 8 bit register.
//!
//! Use this function to write any value in the range 0-3 bits aligned on a
//! half byte boundary. Fx. for writing the value 0b101 to bits 1 and 3 the
//! \e ui8Val = 0xA and the \e ui8Mask = 0xE. Bits 0 will not be affected by
//! the operation, as long as the corresponding bits are not set in the
//! \e ui8Mask.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI4SetValBit(uint32_t ui32Base, uint32_t ui32Reg, bool bWriteHigh,
              uint8_t ui8Mask, uint8_t ui8Val)
{
    uint32_t ui32RegOffset;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);
    ASSERT(!(ui8Val & 0xF0));
    ASSERT(!(ui8Mask & 0xF0));

    //
    // Get the correct address of the first register used for setting bits
    // in the ADI slave.
    //
    ui32RegOffset = ADI_O_MASK4B + (ui32Reg << 1) + (bWriteHigh ? 1 : 0);

    //
    // Set the selected bits.
    //
    HWREGB(ui32Base + ui32RegOffset) = (ui8Mask << 4) | ui8Val;
}

//*****************************************************************************
//
//! Set a value on any 8 bits inside an 8 bit register in the ADI slave.
//!
//! \param ui32Base is the base address of the ADI port.
//! \param ui32Reg is the Least Significant Register in the ADI slave that
//! will be affected by the write operation.
//! \param ui16Mask is the mask defining which of the 8 bit that should be
//! overwritten. The mask must be defined in the lower half of the 16 bits.
//! \param ui16Val is the value to write. The value must be defined in the lower
//! half of the 16 bits.
//!
//! This function allows byte (8 bit access) to the ADI slave registers.
//!
//! Use this function to write any value in the range 0-7 bits aligned on a
//! byte boundary. Fx. for writing the value 0b101 to bits 1 and 3 the
//! \e ui16Val = 0x0A and the \e ui16Mask = 0x0E. Bits 0,5-7 will not be affected
//! by the operation, as long as the corresponding bits are not set in the
//! \e ui16Mask.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI8SetValBit(uint32_t ui32Base, uint32_t ui32Reg, uint16_t ui16Mask,
              uint16_t ui16Val)
{
    uint32_t ui32RegOffset;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);
    ASSERT(!(ui16Val & 0xFF00));
    ASSERT(!(ui16Mask & 0xFF00));

    //
    // Get the correct address of the first register used for setting bits
    // in the ADI slave.
    //
    ui32RegOffset = ADI_O_MASK8B + (ui32Reg << 1);

    //
    // Set the selected bits.
    //
    HWREGH(ui32Base + ui32RegOffset) = (ui16Mask << 8) | ui16Val;
}

//*****************************************************************************
//
//! Set a value on any 16 bits inside an 2 x 8 bit register aligned on a
//! half-word boundary in the ADI slave
//!
//! \param ui32Base is the base address of the ADI port.
//! \param ui32Reg is the Least Significant Register in the ADI slave that
//! will be affected by the write operation.
//! \param ui32Mask is the mask defining which of the 16 bit that should be
//! overwritten. The mask must be defined in the lower half of the 32 bits.
//! \param ui32Val is the value to write. The value must be defined in the lower
//! half of the 32 bits.
//!
//! This function allows 2 byte (16 bit access) to the ADI slave registers.
//!
//! Use this function to write any value in the range 0-15 bits aligned on a
//! half-word boundary. Fx. for writing the value 0b101 to bits 1 and 3 the
//! \e ui32Val = 0x000A and the \e ui32Mask = 0x000E. Bits 0,5-15 will not be
//! affected by the operation, as long as the corresponding bits are not set
//! in the \e ui32Mask.
//!
//! \return None
//
//*****************************************************************************
__STATIC_INLINE void
ADI16SetValBit(uint32_t ui32Base, uint32_t ui32Reg, uint32_t ui32Mask,
               uint32_t ui32Val)
{
    uint32_t ui32RegOffset;

    //
    // Check the arguments.
    //
    ASSERT(ADIBaseValid(ui32Base));
    ASSERT(ui32Reg < ADI_SLAVE_REGS);
    ASSERT(!(ui32Val & 0xFFFF0000));
    ASSERT(!(ui32Mask & 0xFFFF0000));

    //
    // Get the correct address of the first register used for setting bits
    // in the ADI slave.
    //
    ui32RegOffset = ADI_O_MASK16B + ((ui32Reg << 1) & 0xFC);

    //
    // Set the selected bits.
    //
    HWREG(ui32Base + ui32RegOffset) = (ui32Mask << 16) | ui32Val;
}

//*****************************************************************************
//
// Mark the end of the C bindings section for C++ compilers.
//
//*****************************************************************************
#ifdef __cplusplus
}
#endif

#endif //  __ADI_H__

//*****************************************************************************
//
//! Close the Doxygen group.
//! @}
//
//*****************************************************************************

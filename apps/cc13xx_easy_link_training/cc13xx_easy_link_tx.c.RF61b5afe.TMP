//******************************************************************************
//! @file       cc13xx_easy_link_tx.c
//! @brief      
//!
//! Revised     $Date:
//! Revision    $Revision:
//
//  Copyright (C) 2013 Texas Instruments Incorporated - http://www.ti.com/
//
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//    Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//    Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
//    Neither the name of Texas Instruments Incorporated nor the names of
//    its contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//*****************************************************************************/


/*******************************************************************************
* INCLUDES
*/
#include "stdlib.h"

// Synth calibration fix
#include "cc13xx_init_lib.h"

// BSP
//#include "bsp.h"
//#include "bsp_key.h"
//#include "bsp_led.h"

// LCD
//#include "lcd_dogm128_6.h"

// Chip specific
#include "prcm.h"
#include "cpu.h"
#include "interrupt.h"
#include "pwr_ctrl.h"
#include "rfc.h"

// RF Core
#include "cc26xx_pg2/common_cmd_pg2.h"
#include "cc26xx_pg2/prop_cmd_pg2.h"
#include "cc26xx_pg2/prop_mailbox.h"
#include "hw_rfc_dbell.h"
#include "hw_rfc_pwr.h"
#include "radio_par.h"

// RF Core Patches
#define SYS_PATCH_TYPE static uint32_t
#include "phy_prop_genfsk\pg1\cc13xx\apply_patch.h"
#include "phy_prop_genfsk\pg1\cc13xx\apply_genfsk_rfe_patch.h"
#include "phy_prop_genfsk\pg1\cc13xx\apply_genfsk_mce_patch.h"

//Backdoor
#include "backdoor.h"
#include "gpio.h"

#define EB_SW_ONE_PIN           GPIO_PIN_13
#define EB_SW_ONE_IOID          IOID_13
#define EB_SW_TWO_PIN           GPIO_PIN_14
#define EB_SW_TWO_IOID          IOID_14

// Pin/IO to setup as backdoor.
#define EB_BACKDOOR_PIN         EB_SW_TWO_PIN   
#define EB_BACKDOOR_IOID        EB_SW_TWO_IOID

/*******************************************************************************
* LOCAL FUNCTION PROTOTYPES
*/
static void appError(void);
//static void appDisplayWelcomeScreen(void);
//static void appUpdateTxScreen(uint32_t packetSent);
static void appDcdcOn(uint8_t on);
static void applyPatches(void);
void Init_Backdoor(void);


/*******************************************************************************
* DEFINES
*/
#define NUMBER_OF_PACKETS       100
#define PAYLOAD_LENGTH          20



/****** STEP 0 - Application Initialization *********************************
 *
 * (Outside main function)
 *
 * 1. Declare the RF specific variables.
 *      - These are the variables needed for interracting with the RF Core.
 *
 *      Note:
 *        - All RF Core command structures have to be 4 byte aligned.
 *
 * 2. Declare application specific variables. 
 *      - These are used to control the flow of the EasyLink application. 
 *
 * (Inside main function)
 *
 * 3. Initialize the board, buttons, SPI, LCD and print to LCD.
 * 4. Configure DCDC, power down settings and enable interrupt
 ***************************************************************************/

/* 0.1. Declare the RF specific variables. */
/* 0.1.1. All RF Core command structures have to be 4 byte aligned */
#pragma data_alignment = 4
static rfc_CMD_PROP_RADIO_SETUP_t propSetupCommand;
#pragma data_alignment = 4
static rfc_CMD_PROP_TX_t txCommand;
#pragma data_alignment = 4
static rfc_CMD_RADIO_SETUP_t radioSetupCommand;
#pragma data_alignment = 4
static rfc_CMD_TX_TEST_t txTestCommand;
#pragma data_alignment = 4
static rfc_CMD_FS_t fsCommand;
#pragma data_alignment = 4
static rfc_CMD_WRITE_RFREG_t writeRfRegCommand;

/* 0.1.2. Non-aligned RF specific variables */
static uint32_t propOverridesArray[32];
static uint32_t* propOverrides = propOverridesArray;
static uint8_t packet[PAYLOAD_LENGTH];
static uint32_t scaledFreq;
static uint16_t realFrequency;
static uint16_t realFractFreq;

/* 0.2. Declare application specific variables. */
static uint16_t seqNumber;
static uint32_t packetSent;
static uint32_t packetCounter;
static const char pLcdTiLogo[1024] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x7E, 0x7E, 0x7E, 0x7E, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0x06, 0x00, 0xE0, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x06, 0x00, 0xE0, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0x81, 0x80, 0x80, 0x00, 0x00, 0x80, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x07, 0x07, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x03, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x1F, 0x0F, 0x0F, 0x07, 0x0F, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0x80, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x7F, 0x1F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x1F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/*******************************************************************************
* Messy way of including the Init_Backdoor() function
* It initializes the GPIO pins and their interrupts for the backdoor routine
*******************************************************************************/
void Init_Backdoor(void)
{
  // Initalizes a GPIO pin to function as backdoor.
  // Use to allow the debugger access to the chip to erase any faulty code.
  // ----------------------------------------------------------------------  
  
  //Turn on GPIO, and wait until on.
  PRCMPowerDomainOn(PRCM_DOMAIN_PERIPH);
  while(PRCMPowerDomainStatus(PRCM_DOMAIN_PERIPH) != PRCM_DOMAIN_POWER_ON) {}
  
  // Configure the backdoor for polled mode.
  // Uses (pull-down) CC26EB switch SW2.
  // ---------------------------------------
  BackdoorInit(EB_BACKDOOR_PIN, 0, BACKDOOR_POLLED);
}

/*******************************************************************************
* @brief    EasyLink main function (TX)
*
* @return   None
*******************************************************************************/
main(void)
{ 
  int status_pwmclken = 0;
  int status_prop_cmdsta = 0;
  Init_Backdoor();
  BackdoorOpen();
  
  /* 0.3. Initialize the board, buttons, SPI, LCD and print to LCD. */
  //bspInit(BSP_SYS_CLK_SPD);  
  //bspKeyInit(BSP_KEY_MODE_ISR);
  //bspKeyIntEnable(BSP_KEY_ALL);
  //bspSpiInit(BSP_SPI_CLK_SPD);
  //lcdInit(); 
  //appDisplayWelcomeScreen();
  
  /* 0.4. Configure DCDC, power down settings and enable interrupt */
  //BSP?
  //appDcdcOn(true);
  /*
  PRCMPowerDomainOff(PRCM_DOMAIN_VIMS   |  
                     PRCM_DOMAIN_RFCORE |
                     PRCM_DOMAIN_SYSBUS |
                     PRCM_DOMAIN_CPU);
  
  IntMasterEnable();
  */
  
  
  /****** STEP 1 - RF Core Prerequisites **************************************
   * 1. Switch to HF crystal
   * 2. Enable RF Core power
   * 3. Enable RF Core clocks
   * 4. Send a Ping command to RF Core
   * 5. Wait for Ping response
   ***************************************************************************/
  
  /* 1.1. Switch to external high-speed XTAL. */
  /* Enable OSC DIG interface to change clock sources */
  OSCInterfaceEnable();
  /* Check to not enable XOSC if already enabled */
  if(OSCClockSourceGet(OSC_SRC_CLK_HF) != OSC_XOSC_HF)
  {
    /* Request to switch to the crystal to enable radio operation. */
    OSCClockSourceSet(OSC_SRC_CLK_LF | OSC_SRC_CLK_MF | OSC_SRC_CLK_HF,
                      OSC_XOSC_HF);
    /* Switch the HF source to XTAL - Done via ROM API*/
    OSCHfSourceSwitch();
  }
  /* Disable OSC DIG interface */
  OSCInterfaceDisable();
  
  /* 1.2. Enable RF Core power domain and wait until it's on */
  PRCMPowerDomainOn(PRCM_DOMAIN_RFCORE);
  while(PRCMPowerDomainStatus(PRCM_DOMAIN_RFCORE) != PRCM_DOMAIN_POWER_ON);

  /* 1.3. Enable clocks inside RF Core */
  RFCClockEnable();
  
  //LH: Just for testing purposes, to see if all clocks enable, as only 0x007 clocks enable from the function above.
  //The returned status of PWMCLKEN is 0x7FF, which means that all enable fine.
  
  /*
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = CMDR_DIR_CMD_2BYTE(CMD_FORCE_CLK_ENA,       RFC_PWR_PWMCLKEN_RFCTRC | 
                                                                                         RFC_PWR_PWMCLKEN_FSCA |
                                                                                         RFC_PWR_PWMCLKEN_PHA |
                                                                                         RFC_PWR_PWMCLKEN_RAT |
                                                                                         RFC_PWR_PWMCLKEN_RFERAM |
                                                                                         RFC_PWR_PWMCLKEN_RFE |
                                                                                         RFC_PWR_PWMCLKEN_MDMRAM |
                                                                                         RFC_PWR_PWMCLKEN_MDM |
                                                                                         RFC_PWR_PWMCLKEN_CPERAM |
                                                                                         RFC_PWR_PWMCLKEN_CPE //|
                                                                                         //RFC_PWR_PWMCLKEN_RFC
                                                                                         );
  
  */
  /* Wait until done (because this is a direct command) */
  /*
  while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
  if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
    appError();
  */
  for (int i = 0; i<128; i++)
    status_pwmclken |= HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN);
  
  //LH: still not entirely sure why not all of them enable after the call
  //while (HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) != 0x7FF);
  //while (HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) != 0x487);
  while (HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) != 0x007);
  
  
  /* 1.4. Ping RF Core */
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = CMDR_DIR_CMD(CMD_PING);
  
  /* 1.5. Wait for Ping done */
  while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
  if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
    appError();  
  
  
  
  /****** STEP 2 - Setup radio ************************************************
   * 1. Patch RF Core with latest patches
   * 2. Create CMD_PROP_RADIO_SETUP command
   *
   *      Parameter configuration:
   *        - Symbol Rate = rateWord*fXOSC)/(preScale*2^20)
   *        - Deviation is written as: Deviation [kHz] * (4 * synthDiv/2)
   *        - Preamble modes:
   *          - 00: Send 0 as the first preamble bit
   *          - 01: Send 1 as the first preamble bit
   *          - 10: Send same first bit in preamble and sync word
   *          - 11: Send different first bit in preamble and sync word
   *        - Bit reversal modes:
   *          - 0: Use positive deviation for 1
   *          - 1: Use positive deviation for 0
   *        - MSB first modes:
   *          - 0: Least significant bit transmitted first
   *          - 1: Most significant bit transmitted first
   *        - Whitening modes:
   *          - 00: No whitening
   *          - 01: CC1101/CC2500 compatible whitening
   *          - 10: PN9 whitening without byte reversal
   *          - 11: Reserved
   *
   *       Overrides:
   *         - Low-level overrides is used in PG1 to indicate that we want to run the 
   *           radio from patch RAM and that we want to program the freq. synth. from
   *           the CM3, instead of CM0.
   *
   * 3. Send CMD_PROP_RADIO_SETUP command
   * 4. Wait until command is done executing
   ***************************************************************************/
  
  /* 2.1. Patch the RF Core */
  //PG 2.0 this should not be needed?
  //applyPatches();
  
  /* 2.2.1 Create CMD_PROP_RADIO_SETUP command */
  /* Command header configuration */
  //propSetupCommand.commandNo                = CMD_PROP_RADIO_SETUP;
  radioSetupCommand.commandNo                = CMD_RADIO_SETUP;
  radioSetupCommand.status                   = IDLE;
  radioSetupCommand.pNextOp                  = NULL;
  radioSetupCommand.startTime                = 0;
  radioSetupCommand.startTrigger.triggerType = TRIG_NOW;
  radioSetupCommand.condition.rule           = COND_NEVER;
  
  /* Command specific configuration */
  radioSetupCommand.mode                     = 0x01;                  // IEEE
  radioSetupCommand.__dummy0                 = 2;                     //2 or 0 for 2.4GHz devices                    // 5 bytes preamble
  //propSetupCommand.preamConf.preamMode      = 1;                  // Send 1 as first bit
  //16 or 32 is standard
  //propSetupCommand.formatConf.nSwBits       = 32;                 // 32 bits sync word
  //propSetupCommand.formatConf.bBitReversal  = 0;                  // Positive deviation for '1'
  //propSetupCommand.formatConf.bMsbFirst     = 1;                  // Send MSB first
  //propSetupCommand.formatConf.whitenMode    = 0;                  // No whitening
  
  //LH: these should be irrelevant if using the test command
  //Values are otherwise standard
  //propSetupCommand.modulation.deviation     = 25 * (4 * 6/2);     // 25 kHz deviation
  //previous settings: 32768 //50ksps ; 65536 //100ksps; 26214 //40ksps, DSSS = 4 and FEC gives 5kbit/s
  //propSetupCommand.symbolRate.rateWord      = 25165;              // 38.4 ksps (38.399)
  //propSetupCommand.symbolRate.preScale      = 15;
  //propSetupCommand.rxBw                     = 2;                  // 110 kHz RX bandwidth (see docs)
  
  //LH: The real PG2 settings start here
  //radioSetupCommand.config.frontEndMode      = 0;        //Differential Mode
  radioSetupCommand.config.frontEndMode      = 0x01;
  //this previously caused problems (caused an ERROR_PAR)
  //radioSetupCommand.config.biasMode          = 1;
  radioSetupCommand.config.biasMode          = 1;
  radioSetupCommand.config.bNoAdi0Setup      = 0;
  radioSetupCommand.config.bNoAdi0Trim       = 1;
  radioSetupCommand.config.bNoAdi0Ovr        = 0;
  radioSetupCommand.config.bNoAdi1Setup      = 0;
  radioSetupCommand.config.bNoAdi1Trim       = 1;
  radioSetupCommand.config.bNoAdi1Ovr        = 0;
  radioSetupCommand.config.bNoFsPowerUp      = 0;
  //Here would go the Boost command, which is not relevant for diff.mode
  //LH: With hese last 3-4 commands I am not sure what I am setting
  radioSetupCommand.txPower.IB               = 0;
  radioSetupCommand.txPower.GC               = 0;
  radioSetupCommand.txPower.tempCoeff        = 0;
  
  /* 2.2.2 Create low-level overrides and add them to the setup command */
  
  //LH: these may or may not be causing problems?
  //*propOverrides++ = MCE_RFE_OVERRIDE(1, 0, 0, 1, 0, 0); // Run modem patches
  //*propOverrides++ =                                     // (PG1 only) Control freq. synth. from CM3
  //  SW_REG_OVERRIDE(synthPar, config, ((1 << 7) | 1));
  //LH:the o/p power override is missing? Not sure if it is/will be needed
  //*propOverrides++ = END_OVERRIDE;
  //propSetupCommand.pRegOverride = propOverridesArray;
 
  /* 2.3. Send CMD_PROP_RADIO_SETUP command to RF Core */
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = (uint32_t)&radioSetupCommand;
  
  /* 2.4. Wait until command finished executing */
  /* 2.4.1 First wait until received, parsed and running on RF Core */
  while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
  if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
  {
    for(int j = 0; j<10 ; j++)
    {
      status_prop_cmdsta |= (HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA));
    }
    appError();  }
  
  /* 2.4.2 Wait until command is done executing */
  while( (radioSetupCommand.status & 0x0F00) != DONE_OK );
  
  
  
  /****** STEP 3 - Set frequency **********************************************
   * 1. Create CMD_FS command
   * 2. Send CMD_FS command
   * 3. Wait until command is done executing
   * 4. (PG1 only) Configure freq. synth. from CM3
   ***************************************************************************/
  
  /* 3.1.1 Create CMD_FS command */
  /* Command header configuration */
  fsCommand.commandNo                   = CMD_FS;
  fsCommand.status                      = IDLE;
  fsCommand.pNextOp                     = NULL;
  fsCommand.startTime                   = 0;
  fsCommand.startTrigger.triggerType    = TRIG_NOW;
  fsCommand.condition.rule              = COND_NEVER;
  
  /* Command specific configuration */
  fsCommand.frequency                   = 2400;  // Whole frequency setting
  fsCommand.fractFreq                   = 0;//(uint16_t) (0x1450);    // Fractional frequency setting
  //PG 1.0; PG 2.0 has the divider setting in CMD_RADIO_SETUP and CMD_PROP_RADIO_SETUP_DIV, but the latter is only relevant for CC13xx
  //fsCommand.synthConf.divider           = 0;    // 0 for CC26xx, all else for CC13xx; Divider depends on frequency band
  fsCommand.synthConf.bTxMode           = 1;    // Set freq. synth. in TX mode
  
  fsCommand.calibConf.bOverrideCalib    = 0;    // Configure no form of calibration
  fsCommand.calibConf.bSkipTdcCalib     = 0;    // (Done in CM3 in PG1)
  fsCommand.calibConf.bSkipCoarseCalib  = 0;
  fsCommand.calibConf.bSkipMidCalib     = 0;
  //PG 2.0
  //fsCommand.calibConf.coarsePrecal 
  //PG 1.0
  //fsCommand.coarsePrecal                = 0;
  fsCommand.calibConf.coarsePrecal      = 0;
  fsCommand.midPrecal                   = 0;
  fsCommand.tdcPrecal                   = 0;

  /* 3.1.2 (PG1 only) Rescale the frequency based on divider */
  realFrequency = fsCommand.frequency;
  realFractFreq = fsCommand.fractFreq;
  //scaledFreq = (((fsCommand.frequency << 16) | fsCommand.fractFreq) *2/fsCommand.synthConf.divider);
  //fsCommand.frequency = (scaledFreq >> 16);
  //fsCommand.fractFreq = (scaledFreq & 0xFFFF);
  
  //LH: 3.1.2 (PG2) My approximated way of handling the above PG1 process for PG2
  //?
  
  /* 3.2. Send CMD_FS command to RF Core */
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = (uint32_t)&fsCommand;
  
  /* 3.3. Wait until command finished executing */
  /* 3.3.1. First wait until received, parsed and running on RF Core */
  while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
  if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
    appError();  
  
  /* 3.3.2. Wait until command is done executing */
  while( (fsCommand.status & 0x0F00) != DONE_OK );
  
  /* 3.4. (PG1 only) Configure freq. synth. from CM3 */
  /*
  InitLib_startAndCalibrateSynth(((realFrequency << 16) | (realFractFreq)),
                                 //fsCommand.synthConf.divider,
                                 0,
                                 //InitLibRadioMode_GenFsk,
                                 InitLibRadioMode_CW,
                                 InitLibSynthMode_TX,
                                 24);
  */
  
  
  /****** STEP 4 - TX *********************************************************
   * 1. Create CMD_PROP_TX command
   * (Wait for button press)
   * 2. Create packet (with increasing sequence number and random content)
   * 3. Send CMD_PROP_TX command
   * 4. Wait until command is done executing 
   * (Go to step 3. until 1000 packets sent)
   ***************************************************************************/

  /* 4.1. Create CMP_PROP_TX command */
  /* Command header configuration */
  /*
  txCommand.commandNo                = CMD_PROP_TX;
  txCommand.status                   = IDLE;
  txCommand.pNextOp                  = NULL;
  txCommand.startTime                = 0;
  txCommand.startTrigger.triggerType = TRIG_NOW;
  txCommand.condition.rule           = COND_NEVER;
  */
  
  /* Command specific configuration */
  /*
  txCommand.pktConf.bFsOff           = 0;               // Keep frequency synth on after TX done
  txCommand.pktConf.bUseCrc          = 1;               // Use CRC
  txCommand.pktConf.bVarLen          = 1;               // Send length as first byte
  txCommand.pktLen                   = PAYLOAD_LENGTH;  // Payload length (address + payload)
  txCommand.syncWord                 = 0x930B51DE;      // Sync word to send
  txCommand.pPkt                     = packet;          // Pointer to payload
  */
  
  
  
  
  
  
   /*******************************************************
  *
  * Reading FS Calibration state - after sending FS_CMD
  *
  *******************************************************/

  write CMD_READ_FS_CAL and then read status/output; it's an immediate command
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = (uint32_t)&fsReadCalCommand;
  
  /* Wait until done (because this is a immediate command) */
  while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
  
  //read CMDSTA, in case it returns that the FS is disabled
  //0x085 is returned still => means that the FS is either OFF or "under calibration"
  //Taking into account, that that is the status before sending CMD_FS,
  //chances are it's just off.
  
  //CMDSTA return stays at 0x085 even with the second set of patches
  //the return might be misleading?
  for (int i=0;i<128;i++) {
    fs_status_cmdsta |= HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA);
  }
  
  if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
    radioEnterErrorState();
  
  //read the rest of the relevant FS settings; In this case they should all be 0 as they are not set up yet
  //for (int i=0;i<128;i++) {
  //    fs_status_cal |= (fsReadCalCommand.status & 0xFFFF);
  //}
  
  
  
  
  
  
  //LH: Optional test-command used for transmitting CW and PN9
  /* Command header configuration */
  
  txTestCommand.commandNo                = CMD_TX_TEST;
  txTestCommand.status                   = IDLE;
  txTestCommand.pNextOp                  = NULL;
  txTestCommand.startTime                = 0;
  txTestCommand.startTrigger.triggerType = TRIG_NOW;
  txTestCommand.condition.rule           = COND_NEVER;
  
  /* Command specific configuration */
  //LH: CW or PN9 setting
  //However, for PG 1.0, the FS fix function needs to be altered as well.
  //For PG 2.0 the CMD should be enough.
  txTestCommand.config.bUseCw            = 1;               // Send an unmodulated CW
  txTestCommand.config.bFsOff            = 0;               // Turn FS off after execution
  txTestCommand.config.whitenMode        = 0;               // Disable Data Whitening
  txTestCommand.txWord                   = 0xAAAA;          // TxWord to be transmitted after Sync
  
  txTestCommand.endTrigger.triggerType   = TRIG_NEVER;      // Transmit CW indefinitely
  txTestCommand.syncWord                 = 0x930B51DE;      // Sync word to send                                   
  
  /* Enter main, infinite, loop */
  while(true)
  {  
    /* Wait for button press */
    //while (bspKeyPushed(BSP_KEY_ALL) == 0);
    
    //while (packetCounter++ < NUMBER_OF_PACKETS)
    //{
      /* 4.2. Create packet with incrementing sequence number and random payload */
      //packet[0] = (uint8_t)(seqNumber >> 8);
      //packet[1] = (uint8_t)(seqNumber++);
      //for (uint8_t i = 2; i < PAYLOAD_LENGTH; i++)
      //  packet[i] = rand();
        
      /* Reset command status to idle (from done), since we are reusing the same command */
      //txCommand.status = IDLE;
      txTestCommand.status = IDLE;
      
      /* 4.3. Send packet using CMD_PROP_TX */  
      //HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = (uint32_t)&txCommand;
      HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = (uint32_t)&txTestCommand;
      
      
      /* 4.4. Wait until command finished executing */
      /* 3.4.1 First wait until received, parsed and running on RF Core */
      while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
      if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
        appError();
      
      /* 3.4.2 Wait until command is done executing
       *         - This may be implemented by going to deep sleep and wait for the IRQ_COMMAND_DONE 
       *           instead of polling. See the EasyLink RX example on how to implement this. */
      
      //LH:I'm pretty sure I removed the interrupt, which is supposed to stop this, as it was
      //button-press dependent. Solution would be to put it in a loop that is not infinite.
      //while( (txCommand.status & 0x0F00) != DONE_OK );
      while( (txTestCommand.status & 0x0F00) != DONE_OK );
      
      
      //appUpdateTxScreen(++packetSent);
    //}
    //packetCounter = 0;
  }
}



/*******************************************************************************
* @brief    Patches the RF Core firmware
*
*           Patches the CPE as well as the modem and front-end.
*
*           Note: This should be done after a command has been succesfully sent to the RF Core
*                 so that it is guaranteed to happen after the radio has done its own 
*                 initialization.
* 
* @return   None
*******************************************************************************/
static void applyPatches(void)
{
  /* Apply CPE patch.
   * Note: The below line will be included in a future CPE patch. */
  *((uint32_t *)0x21000028) = 0x00000000;
  applyPatch();
  
  /* Start RAT timer */
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = CMDR_DIR_CMD(CMD_START_RAT);
  
  /* Wait until done (because this is a direct command) */
  while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
  if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
    appError();  
  
  /* Force-enable the MCE and RFE RAM, used for patching */
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) 
    = CMDR_DIR_CMD_2BYTE(CMD_FORCE_CLK_ENA, RFC_PWR_PWMCLKEN_MDMRAM | 
                                            RFC_PWR_PWMCLKEN_RFERAM);
  
  /* Wait until done (because this is a direct command) */
  while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
  if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
    appError();  
  
  /* Apply the RFE and MCE patch to the respective patch RAM */
  enterGenfskRfePatch();
  enterGenfskMcePatch();

  /* Remove force-enable of the MCE and RFE RAM clocks */
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = CMDR_DIR_CMD_2BYTE(CMD_FORCE_CLK_ENA, 0);
  
  /* Wait until done (because this is a direct command) */
  while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
  if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
    appError();
  
  /* Force BUS power domain on from RF Core
   *   Note:
   *     This has to be on for the RF Core to be able to access the patches via the system bus. */
  writeRfRegCommand.commandNo = CMD_WRITE_RFREG;
  writeRfRegCommand.address   = 0x1128;
  writeRfRegCommand.value     = 2;
  
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDR) = (uint32_t)&writeRfRegCommand;
  
  /* Wait until done (because this is a immediate command) */
  while( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) == CMDSTA_Pending);
  if( HWREG(RFC_DBELL_BASE + RFC_DBELL_O_CMDSTA) != CMDSTA_Done )
    appError();
}

/*******************************************************************************
* @brief    Display welcome screen
*
* @return   None
*******************************************************************************/
/*
static void appDisplayWelcomeScreen(void)
{
  lcdClear();
  lcdBufferClear(0);
  lcdSendBuffer(pLcdTiLogo);
  lcdBufferPrintString(0, "CC13xx", 63, eLcdPage2);
  lcdBufferPrintString(0, "TX Test", 63, eLcdPage3);
  lcdBufferPrintString(0, "Press a key", 63, eLcdPage5);
  lcdBufferPrintString(0, "to transmit", 63, eLcdPage6);
  lcdSendBufferPart(0, 63, 127, eLcdPage2, eLcdPage6);
}
*/

/*******************************************************************************
* @brief    Update TX screen
@
@ param     packetSent - Number of packets sent
*
* @return   None
*******************************************************************************/
/*
static void appUpdateTxScreen(uint32_t packetSent)
{
  lcdBufferClear(0);
  lcdBufferPrintString(0, "Packets", 63, eLcdPage1);
  lcdBufferPrintString(0, "Sent:", 63, eLcdPage2);
  lcdBufferPrintInt(0, packetSent, 63, eLcdPage4);
  lcdSendBufferPart(0, 63, 127, eLcdPage1, eLcdPage4);
  lcdBufferPrintString(0, "", 50, eLcdPage5);
  lcdBufferPrintString(0, "", 50, eLcdPage6);
  lcdSendBufferPart(0, 50, 127, eLcdPage5, eLcdPage6);
}
*/

/*******************************************************************************
* @brief    Toggles DC/DC converter on/off
*
* @return   None
*******************************************************************************/
static void appDcdcOn(uint8_t on)
{
  if(on)
  {
    PowerCtrlSourceSet(PWRCTRL_PWRSRC_DCDC);
  }
  else
  {
    PowerCtrlSourceSet(PWRCTRL_PWRSRC_GLDO);
  }
}


/*******************************************************************************
* @brief    Error function. Eternal loop that blinks all LEDs quickly.
*           Function assumes LEDs to be initialized by, for example, bspInit()
*
* @return   None
*******************************************************************************/
void appError(void)
{
  uint32_t ui32Delay = 1000000UL;
  //bspLedClear(BSP_LED_ALL);

  while(true)
  {
    CPUdelay(ui32Delay);
    //bspLedToggle(BSP_LED_ALL);
  }
}